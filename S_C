import pyxel
import random
pyxel.init(210, 120, fps=60)
pyxel.load("PYXEL_RESOURCE_FILE.pyxres")
point_1:int =0
x_1: int = 31
y_1: int = 90
pv_1 :int = 100
Shield_1: int = 0
cds_1: int = 0
jump_1: int = 0
velocyté_y1: float = 0
punch_1: int = 0
pa_1:int = 0
dx_1 : str = "right"
dy_1 : str = "neutral"
att_1 : str = " "
vulnerable_1 : int = 0
direction_1: tuple [str : str] = ( dx_1 , dy_1)
mouvement_1r:bool = False
mouvement_1l:bool = False
distance_1r:int = 0
distance_1l:int = 0
no_mv1: int = 0

def attack_1 ( x_1, y_1, direction_1):
    global x_2, y_2, vulnerable_2, pv_2, jump_1, velocyté_y1
    direction_1 = (dx_1,dy_1)
    if direction_1 == ("right","neutral"):
        #pyxel.rectb(x_1 + 7, y_1  , 15, 13, 0) # hit boxe de l'attaque ver la droite 
        if punch_1 < 3:
            pyxel.blt(x_1, y_1, 0, 0, 48, 7, 13,0)
        elif punch_1 < 2:
            pyxel.blt(x_1, y_1, 0, 0, 64, 7, 13,0)
        elif punch_1 < 0 :
            pyxel.blt(x_1, y_1, 0, 0, 80, 7, 13,0)
        if ((x_1 +7)< (x_2 + 7) and (x_1 + 22) > x_2 and y_1 < (y_2 + 13) and (y_1 + 13) > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(10, 25)
                if x_2 < 200 :
                    x_2 = x_2 + 5
    if direction_1 == ("right", "up"):
        #pyxel.rectb(x_1 - 3, y_1 - 15, 13, 15, 0) # hit boxe de l'attaque ver le haut
        if ((x_1 - 3) < (x_2 + 7) and (x_1 + 13) > x_2 and (y_1-15) <(y_2 + 13) and y_1  > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(10, 20)
                y_2 = y_2 - 5
    if direction_1 == ("right", "down"):
        #pyxel.rectb(x_1-3, y_1 + 15, 13,17, 0) # hit boxe de l'attaque ver le bas
        if ((x_1 - 3) < (x_2 + 7) and (x_1 + 13) > x_2 and (y_1 + 13) <(y_2 + 13) and (y_1 + 30)  > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(15, 30)
                jump_1 = 10
                velocyté_y1 = 0
    if direction_1 == ("left", "neutral"): 
        #pyxel.rectb(x_1 - 15, y_1  , 15, 13, 0) # hit boxe de l'attaque ver la gauche
        if ( (x_1-15) < (x_2 +7 ) and x_1 > x_2 and y_1 < (y_2 + 13) and (y_1 + 13) > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(10, 25)
                if x_2 > 3 :
                    x_2 = x_2 - 5
    if direction_1 == ("left", "up"):
        #pyxel.rectb(x_1-3, y_1 - 15, 13,15, 0) # hit boxe de l'attaque ver le haut
        if ((x_1 - 3) < (x_2 + 7) and (x_1 + 13) > x_2 and (y_1-15) <(y_2 + 13) and y_1  > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(10, 20)
                y_2 = y_2 - 5
    if direction_1 == ("left", "down"):
        #pyxel.rectb(x_1-3, y_1 + 15, 13,17, 0) # hit boxe de l'attaque ver le bas
        if ((x_1 - 3) < (x_2 + 7) and (x_1 + 13) > x_2 and (y_1 + 13) <(y_2 + 13) and (y_1 + 30)  > y_2) :
            if vulnerable_2 == 0 :
                vulnerable_2 = 5
                pv_2 = pv_2 - random.randint(15, 30)
                jump_1 = 10
                velocyté_y1 = 0
    
point_2:int = 0 
x_2 :int = 186
y_2 :int = 90
pv_2 :int = 100
Shield_2:int = 0
cds_2:int = 0
velocyté_y2: float = 0
jump_2: int = 0
punch_2: int = 0
dx_2 : str = "left"
dy_2 : str = "neutral"
att_2 : str = " "
direction_2: tuple [str : str] = ( dx_2 , dy_2)
vulnerable_2: int = 0

def attack_2(x_2, y_2, direction_2):
    global x_1, y_1,vulnerable_1, pv_1, jump_2, velocyté_y2
    direction_2 = (dx_2, dy_2)   
    if direction_2 == ("right", "neutral"):
        #pyxel.rectb(x_2 + 7, y_2, 15, 13, 0) # hit boxe de l'attaque ver la droite 
        if ((x_2 + 7) < (x_1 + 7) and (x_2 + 22) > x_1 and y_2 < (y_1 + 13) and (y_2 + 13) > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(10, 25)
                if x_1 < 200 :
                    x_1 = x_1 + 5
    if direction_2 == ("right", "up"):
        #pyxel.rectb(x_2 - 3, y_2 - 15, 13, 15, 0) # hit boxe de l'attaque ver le haut
        if ((x_2 - 3) < (x_1 + 7) and (x_2 + 13) > x_1 and (y_2 - 15) < (y_1 + 13) and y_2 > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(10, 20)
                y_1 = y_1 - 5  
    if direction_2 == ("right", "down"):
        #pyxel.rectb(x_2 - 3, y_2 + 15, 13, 17, 0) # hit boxe de l'attaque ver le bas
        if ((x_2 - 3) < (x_1 + 7) and (x_2 + 13) > x_1 and (y_2 + 13) < (y_1 + 13) and (y_2 + 30) > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(15, 30)
                jump_2 = 10 
                velocyté_y2 =0    
    if direction_2 == ("left", "neutral"): 
        #pyxel.rectb(x_2 - 15, y_2, 15, 13, 0) # hit boxe de l'attaque ver la gauche
        if ((x_2 - 15) < (x_1 + 7) and x_2 > x_1 and y_2 < (y_1 + 13) and (y_2 + 13) > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(10, 25)
                if x_1 > 3 :
                    x_1 = x_1 - 5   
    if direction_2 == ("left", "up"):
        #pyxel.rectb(x_2 - 3, y_2 - 15, 13, 15, 0) # hit boxe de l'attaque ver le haut
        if ((x_2 - 3) < (x_1 + 7) and (x_2 + 13) > x_1 and (y_2 - 15) < (y_1 + 13) and y_2 > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(10, 20)
                y_1 = y_1 - 5    
    if direction_2 == ("left", "down"):
        #pyxel.rectb(x_2 - 3, y_2 + 15, 13, 17, 0) # hit boxe de l'attaque ver le bas
        if ((x_2 - 3) < (x_1 + 7) and (x_2 + 13) > x_1 and (y_2 + 13) < (y_1 + 13) and (y_2 + 30) > y_1):
            if vulnerable_1 == 0 :
                vulnerable_1 = 5
                pv_1 = pv_1 - random.randint(15, 30)
                jump_2 = 10
                velocyté_y2 = 0
    

gravity: float = 0.5 #gravité





def update():
    global x_1, y_1,direction_1, mouvement_1r, mouvement_1l, distance_1r, distance_1l, dx_1, dy_1, att_1, punch_1, jump_1, velocyté_y1, Shield_1, vulnerable_1, pv_1, point_1, cds_1, x_2, y_2, direction_2, dx_2, dy_2, att_2, punch_2, jump_2, velocyté_y2, Shield_2, cds_2, vulnerable_2, pv_2, point_2, gravity
    
    if jump_1 > 5 :                           #-------------------------------------
        y_1 = y_1 - 5                         # phase 1 saut J1
        jump_1 = jump_1 - 1                   #
    elif jump_1 > 0 :                         # phase 2 saut J1
        y_1 = y_1 - 2                         #
        jump_1 = jump_1 - 1                   #
    elif jump_1 == 0:                         # Gravité
        velocyté_y1 = velocyté_y1 + gravity   #
        y_1 = y_1 + velocyté_y1               #--------------------------------------

    if y_1 >= 90 :               # limite du sole pour J1
        y_1 = 90
        velocyté_y1 = 0

    if jump_2 > 5 :              #-------------------------------------
        y_2 = y_2 - 5            # phase 1 saut J2
        jump_2 = jump_2 - 1      #
    elif jump_2 > 0 :            # phase 2 saut J2
        y_2 = y_2 - 2            #
        jump_2 = jump_2 - 1      #
    elif jump_2 == 0:            # Gravité
        velocyté_y2 += gravity   #
        y_2 += velocyté_y2      #--------------------------------------

    if y_2 >= 90 :               # limite du sole pour J2
        y_2 = 90
        velocyté_y2 = 0
    

    if pyxel.btnp(pyxel.KEY_X) and (jump_1 == 0)and (velocyté_y1 == 0):
        y_1 = y_1 - 10
        jump_1 = 10 

    if pyxel.btnp(pyxel.KEY_C) and cds_1 == 0:
        Shield_1 = 15
        cds_1 = 60
        vulnerable_1 = 15
    if Shield_1 != 0 :
        Shield_1 = Shield_1 - 1
    if cds_1 > 0 :
        cds_1 = cds_1 -1

    if pyxel.btn(pyxel.KEY_Q) and x_1 - 1 > 3 :
        x_1 = x_1 - 3
        dx_1 = "left"
        mouvement_1l = True
        distance_1l = distance_1l + 1
    else :
        mouvement_1l = False
        distance_1l = 0
    if pyxel.btn(pyxel.KEY_D) and x_1 + 1 < 200:                    
        x_1 = x_1 + 3
        dx_1 = "right"
        mouvement_1r = True
        distance_1r = distance_1r + 1
    else :
        mouvement_1r = False
        distance_1r = 0

    if pyxel.btn(pyxel.KEY_Z):
        dy_1 = "up"
    elif pyxel.btn(pyxel.KEY_S) and y_1 < 90:
        dy_1 = "down"
    else :
        dy_1 = "neutral"

    
    if pyxel.btnp(pyxel.KEY_L) and cds_2 == 0 :
        Shield_2 = 15
        cds_2 = 60
        vulnerable_2 = 15
    if Shield_2 > 0 :
        Shield_2 = Shield_2 - 1
    if cds_2 > 0 :
        cds_2 = cds_2 -1
    
    if pyxel.btnp(pyxel.KEY_V) and punch_1 == 0:
        attack_1(x_1,y_1,direction_1)
        punch_1 = 5
        #if att_1 == 
    if punch_1 != 0 :
        punch_1 = punch_1 - 1
    if vulnerable_1 > 0 :
        vulnerable_1 = vulnerable_1 - 1
    if vulnerable_2 > 0 :
        vulnerable_2 = vulnerable_2 - 1


    if pyxel.btnp(pyxel.KEY_K) and (jump_2 == 0)and (velocyté_y2 == 0):
        y_2 = y_2 - 10
        jump_2 = 10
    
    if pyxel.btn(pyxel.KEY_RIGHT) and x_2 + 1 < 200:
        x_2 = x_2 + 3
        dx_2 = "right"
    if pyxel.btn(pyxel.KEY_LEFT) and x_2 - 1 > 2:
        x_2 = x_2 - 3
        dx_2 = "left"
    
    if pyxel.btn(pyxel.KEY_UP):
        dy_2 = "up"
    elif pyxel.btn(pyxel.KEY_DOWN) and y_2 < 90:
        dy_2 = "down"
    else :
        dy_2 = "neutral"

    if pyxel.btnp(pyxel.KEY_M) and punch_2 == 0:
        attack_1(x_2,y_2,direction_2)
        punch_2 = 5
        if att_2 == pyxel.rect(x_1, y_1, 7, 13, 7) :
            print ("!")
    if punch_2 != 0 :
        punch_2 = punch_2 - 1

    if pv_1 <= 0 or pv_2 <= 0 :
        x_1 = 31
        y_1 = 30
        x_2 = 186
        y_2 = 30
        if pv_1 <= 0 :
            pv_1 = 100
            point_2 = point_2 + 1 
        elif pv_2 <= 0 :
            pv_2 =100    
            point_1 = point_1 + 1

def draw() -> None:
    global x_1, y_1,direction_1, mouvement_1r, mouvement_1l, no_mv1, distance_1r, distance_1l, dx_1, dy_1, att_1, punch_1, jump_1, velocyté_y1, Shield_1, cds_1, vulnerable_1, pv_1, point_1, x_2, y_2, direction_2, dx_2, dy_2, att_2, punch_2, jump_2, velocyté_y2, Shield_2, cds_2, vulnerable_2, pv_2, point_2, gravity
    pyxel.cls(5)
    pyxel.rect(0, 100, 210, 20, 4)
    pyxel.rect(0, 100, 210, 3, 9)
    
    pyxel.rectb(94,10, 6, 6, 6)
    pyxel.rectb(102,10, 6, 6, 6)
    pyxel.rectb(110,10, 6, 6, 6)

    if point_1 >= 1 :
        pyxel.rect(95, 11, 4, 4, 7)
    if point_2 >= 1 :
        pyxel.rect(111, 11, 4, 4, 8)
    if point_1 == 2 :
        pyxel.rect(103,11,4,4,7)
        pyxel.text(184,50,"K.O", 8)
        pyxel.text(19,50,"Victoire", 7)
    if point_2 == 2 :
        pyxel.rect(103,11,4,4,8)
        pyxel.text(174,50,"Victoire", 8)
        pyxel.text(30,50,"K.O", 7)
    if point_1 == 2 or point_2 == 2 :
        x_1 = 31
        x_2 = 186
        pyxel.text(44,100,"Appuiez sur 'Espace' pour relancer", 0)
        if pyxel.btnp(pyxel.KEY_SPACE):
            point_1 = 0
            point_2 = 0
    
    if punch_1 > 0 :
        attack_1(x_1,y_1,direction_1)
    if Shield_1 > 0 :
        if Shield_1 < 2 or Shield_1 > 2 :
            pyxel.circb(x_1 + 3, y_1 + 6, 8, 3)
    pyxel.circb( 9, 111 , 6, 7)
    if cds_1 > 0 :
        if cds_1 > 40 :
            pyxel.circ( 9, 111 , 6, 3)
        if cds_1 > 20 :
            pyxel.circ( 9, 111 , 4, 3)
        if cds_1 > 0 :
            pyxel.circ( 9, 111 , 2, 3)
    pyxel.rectb(x_1, y_1, 7, 13, 7)        # hit boxe du joueur 1
    
    
    if punch_2 > 0 :
        attack_2(x_2,y_2,direction_2)
    if Shield_2 > 0 :
        if Shield_2 < 2 or Shield_2 > 2 :
            pyxel.circb(x_2 + 3, y_2 + 6, 8, 14)
    pyxel.circb( 200, 111 , 6, 8)
    if cds_2 > 0 :
        if cds_2 > 40 :
            pyxel.circ( 200, 111 , 6, 14)
        if cds_2 > 20 :
            pyxel.circ( 200, 111 , 4, 14)
        if cds_2 > 0 :
            pyxel.circ( 200, 111 , 2, 14)
    pyxel.rectb(x_2, y_2,7, 13, 8)         # hit boxe du joueur 2
    
                                            #------------------------------------------
    pyxel.rectb( 2, 2, 102, 6, 6)           #
    pyxel.rect( 3, 3, 100, 4, 8)            #
    pyxel.rect( 3, 3, pv_1 , 4, 11)         # affiche les pv du joueur 1
    pyxel.rectb( 106, 2, 102, 6, 6)         #
    pyxel.rect( 107, 3, 100, 4, 8)          #
    pyxel.rect( 107, 3, pv_2, 4, 11)        # affiche les pv du joueur 2
                                            #------------------------------------------
    
    if  (mouvement_1l and  mouvement_1r) or (not mouvement_1l and  not mouvement_1r) :      # permet de verifer si le joueur est imobile pour fair défiler les sprit
        if dx_1 == "right":
            no_mv1 = no_mv1 + 2   
            m1= no_mv1 % 60
            print( no_mv1)
            if m1 > 50:  
                pyxel.blt(x_1, y_1, 0, 0, 32, 7, 13,0)
            elif m1 > 20 :
                pyxel.blt(x_1, y_1, 0, 0, 16, 7, 13,0)
            else:
                pyxel.blt(x_1, y_1, 0, 0, 0, 7, 13,0)

        else :
            if dx_1 == "left":
                no_mv1 = no_mv1 + 3   
                m1= no_mv1 % 60
                print( no_mv1)
                if m1 > 50:  
                    pyxel.blt(x_1, y_1, 0, 0, 32, -7, 13,0)
                elif m1 > 20 :
                    pyxel.blt(x_1, y_1, 0, 0, 16, -7, 13,0)
                else:
                    pyxel.blt(x_1, y_1, 0, 0, 0, -7, 13,0)


pyxel.run(update, draw)
